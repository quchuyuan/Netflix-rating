ReadMe For Clustering    

Overall reasoning:

The method uses the so-called Spectral Clustering to cluster n users to k groups by their similarity to each other. 
The key reasoning behind this is that we assume two users who rated the same movie with a similar score will rate another movie similarly.
In mathematics: for user_i in cluster_c, it's rating for movie_j is missing, then the prediction for user_i to rate movie_j is the mean of the existing rating of other users in cluster_c for movie_j.

The key problem is how to cluster users into groups. And here Spectral Clustering is applied. There are two main problems needed to be solved:
1. how to define the distance between two users.
2. how to decide the parameter k, the number of clusters.

diagrammatic summary:

Input: pieces of <movie, user, rating> data, the number of cluster K.
Output: K different groups
Set 80% of the training set as training data, 20% as validation data.
Calculate the distance between any two users in training data and construct the similarity matrix.
Construct a Laplacian matrix and then find eigenvectors.
Use the Kmeans method to build clusters and use validation data to test the accuracy. Then tune the value of k to find the best accuracy. 

After clustering, we just calculate the mean rating of all movies in each cluster and then fill the missing rating with them.


Extra detail:

1. The data set is in the form of  <movie, user, rating>, but we are looking for a format that can look up the rating of movie j by user i. So I used a data structure: Map<Integer, Map<Integer, Integer>>.
to achieve the mapping of user=>moive=>rating.

2. One of the trickiest tasks is to define the distance between two users. Here I used the following method: if two users have rated p same movies,
the distance between them is the L2-norm of the difference of each movie them divided by p to make it normalized. After calculated the distance, the similarity of two users is defined as exp(-Distance/2). This is not a perfect definition of distance since if two users only have one movie in common and they gave the same rating, this formulation will say these two users are very similar which is not.
Therefore I set: if two users have no movies in common then their similarity is zero instead of 1 calculated by definition.

