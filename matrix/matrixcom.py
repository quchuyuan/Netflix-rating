# -*- coding: utf-8 -*-
"""MatrixCom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3sB8DfJ9A2FfPpYMoTD5YCdn2iiTvyW
"""

import numpy as np
from scipy.sparse.linalg import svds
import pandas as pd
import csv

users=set()
movies=set()

with open('/content/drive/My Drive/train.csv') as f:
    f_csv = csv.reader(f)
    headers = next(f_csv)
    for row in f_csv:
      if len(row)==4:
        movie=row[0]
        user=row[1]
        movies.add(movie)
        users.add(user)

print(len(users))
userLen=len(users)
movieLen=len(movies)
print(movieLen)

A=np.zeros((userLen,movieLen))

movieDic={}
iid=0
for i in movies:
  movieDic[i]=iid
  iid+=1

userDic={}
iid=0
for i in users:
  userDic[i]=iid
  iid+=1

with open('/content/drive/My Drive/train.csv') as f:
    f_csv = csv.reader(f)
    headers = next(f_csv)
    for row in f_csv:
      if len(row)==4:
        movie=row[0]
        user=row[1]
        userID=userDic[user]
        movieID=movieDic[movie]
        A[userID, movieID]=row[2]

def non_zero_mean(np_arr):
    exist = (np_arr != 0)
    num = np_arr.sum()
    den = exist.sum()
    return num/den

def define_zero(np_arr,row_mean):
    np_arr[np_arr==0]=row_mean
    return 


ratings_mean=[]
for i in range(0,5904):
  ratings_mean.append(non_zero_mean(A[i,:]))
ratings_mean=np.asarray(ratings_mean)

for i in range(0,5904):
  define_zero(A[i,:],ratings_mean[i])

from scipy.sparse.linalg import svds
U, sigma, Vtrans = svds(A, k = 50)

sigma=np.diag(sigma)

predicted_ratings = np.dot(np.dot(U, sigma), Vtrans)

testlist=[]
with open('/content/drive/My Drive/test.csv') as fx:
    fx_csv = csv.reader(fx)
    for row in fx_csv:
      testlist.append([row[0],row[1],row[3]])
len(testlist)

for ps in testlist:
  if ps[0] not in movieDic or ps[1] not in userDic:
    ps.append(3)
  else:
    m=movieDic[ps[0]]
    u=userDic[ps[1]]
    prediction=predicted_ratings[u,m]
    ps.append(round(prediction, 2))

testlist[5]

fileHeader = ["movie-id", "customer-id", "date", "rating"]

csvFile = open("result.csv", "w")
writer = csv.writer(csvFile)

writer.writerow(fileHeader)
for ps in testlist:
  writer.writerow(ps)


csvFile.close()